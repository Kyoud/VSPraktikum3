/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef timeserver_H
#define timeserver_H

#include <thrift/TDispatchProcessor.h>
#include "time_types.h"



class timeserverIf {
 public:
  virtual ~timeserverIf() {}
  virtual void ping() = 0;
  virtual void time(valuesStruct& _return) = 0;
};

class timeserverIfFactory {
 public:
  typedef timeserverIf Handler;

  virtual ~timeserverIfFactory() {}

  virtual timeserverIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(timeserverIf* /* handler */) = 0;
};

class timeserverIfSingletonFactory : virtual public timeserverIfFactory {
 public:
  timeserverIfSingletonFactory(const boost::shared_ptr<timeserverIf>& iface) : iface_(iface) {}
  virtual ~timeserverIfSingletonFactory() {}

  virtual timeserverIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(timeserverIf* /* handler */) {}

 protected:
  boost::shared_ptr<timeserverIf> iface_;
};

class timeserverNull : virtual public timeserverIf {
 public:
  virtual ~timeserverNull() {}
  void ping() {
    return;
  }
  void time(valuesStruct& /* _return */) {
    return;
  }
};


class timeserver_ping_args {
 public:

  timeserver_ping_args() {
  }

  virtual ~timeserver_ping_args() throw() {}


  bool operator == (const timeserver_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const timeserver_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeserver_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeserver_ping_pargs {
 public:


  virtual ~timeserver_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeserver_ping_result {
 public:

  timeserver_ping_result() {
  }

  virtual ~timeserver_ping_result() throw() {}


  bool operator == (const timeserver_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const timeserver_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeserver_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeserver_ping_presult {
 public:


  virtual ~timeserver_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class timeserver_time_args {
 public:

  timeserver_time_args() {
  }

  virtual ~timeserver_time_args() throw() {}


  bool operator == (const timeserver_time_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const timeserver_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeserver_time_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeserver_time_pargs {
 public:


  virtual ~timeserver_time_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeserver_time_result__isset {
  _timeserver_time_result__isset() : success(false) {}
  bool success;
} _timeserver_time_result__isset;

class timeserver_time_result {
 public:

  timeserver_time_result() {
  }

  virtual ~timeserver_time_result() throw() {}

  valuesStruct success;

  _timeserver_time_result__isset __isset;

  void __set_success(const valuesStruct& val) {
    success = val;
  }

  bool operator == (const timeserver_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const timeserver_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeserver_time_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeserver_time_presult__isset {
  _timeserver_time_presult__isset() : success(false) {}
  bool success;
} _timeserver_time_presult__isset;

class timeserver_time_presult {
 public:


  virtual ~timeserver_time_presult() throw() {}

  valuesStruct* success;

  _timeserver_time_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class timeserverClient : virtual public timeserverIf {
 public:
  timeserverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  timeserverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void time(valuesStruct& _return);
  void send_time();
  void recv_time(valuesStruct& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class timeserverProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<timeserverIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (timeserverProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  timeserverProcessor(boost::shared_ptr<timeserverIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &timeserverProcessor::process_ping;
    processMap_["time"] = &timeserverProcessor::process_time;
  }

  virtual ~timeserverProcessor() {}
};

class timeserverProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  timeserverProcessorFactory(const ::boost::shared_ptr< timeserverIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< timeserverIfFactory > handlerFactory_;
};

class timeserverMultiface : virtual public timeserverIf {
 public:
  timeserverMultiface(std::vector<boost::shared_ptr<timeserverIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~timeserverMultiface() {}
 protected:
  std::vector<boost::shared_ptr<timeserverIf> > ifaces_;
  timeserverMultiface() {}
  void add(boost::shared_ptr<timeserverIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void time(valuesStruct& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->time(_return);
    }
    ifaces_[i]->time(_return);
    return;
  }

};



#endif
