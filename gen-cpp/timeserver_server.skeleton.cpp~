// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "timeserver.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <cstdlib>
#include <iostream>
#include <ctime>
#include <ratio>
#include <chrono>
#include <sys/time.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class timeserverHandler : virtual public timeserverIf {
 public:
  timeserverHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  void time(valuesStruct& _return) {
	struct timeval t1;
	struct timeval t2;
	gettimeofday(&t1, NULL); // server start time
	long int t1_ms = t1.tv_sec*(int)1e6 + t1.tv_usec; // caculate milliseconds

	time_t rawtime;
	struct tm * timeinfo;
	char buffer[80];

	std::time (&rawtime);
	timeinfo = localtime(&rawtime);

	strftime(buffer, 80, "%d-%m-%Y %I:%M:%S", timeinfo);
	std::string str(buffer);

	gettimeofday(&t2, NULL); // client request time
	long int t2_ms = t2.tv_sec*(int)1e6 + t2.tv_usec; // caculate milliseconds

	_return.t1 = t1_ms;
	_return.t2 = t2_ms;
	_return.unixtime = str;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<timeserverHandler> handler(new timeserverHandler());
  shared_ptr<TProcessor> processor(new timeserverProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

